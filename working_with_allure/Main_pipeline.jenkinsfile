def runTests(hosts){
    println "Starting tests"
    jobStatus = build(job: 'Run_Tests',
                              propagate: false,
                              parameters: [
                                  [$class: 'ExtendedChoiceParameterValue', name: 'HOSTS', value: hosts.join(',')],
                              ])

    return jobStatus
}
node('master'){
    try{
        stage('save history'){
            try{
                sh'pwd'
                sh'cp -a /working_with_allure/allure-results/ /working_with_allure/results-history/'
            }
            catch(err){
                println(err)
            }
        }
    }
    catch(err){
        println(err)
    }
    stage('run tests'){
//         jobStatus = build job: 'Run_Tests', wait: true
        jobStatus = runTests(hosts)
        currentBuild.result=jobStatus.result
        if(jobStatus.buildVariables.FAILURES) {
            println 'failed: '+jobStatus.buildVariables.FAILURES
        }
        else{
            println 'All tests passed'
        }
    }

    stage('get reports'){
        try{
            sh'cp -a /var/jenkins_home/workspace/Main_pipeline/allure-report/history /var/jenkins_home/workspace/Main_pipeline/allure-results/history/'

        }
        catch(err){
            println err
        }
    }

    stage('reports') {
            agent {label 'win10'}
                script {
                allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: 'D:\\jenkins\\automation\\workspace\\allure-results']]
                ])
            }
    }
}
